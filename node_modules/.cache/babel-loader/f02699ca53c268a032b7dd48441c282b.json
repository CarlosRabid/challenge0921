{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\corne\\\\Unsyncro\\\\WorkOfficeFREE\\\\CodingLab\\\\challenge0921\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\corne\\\\Unsyncro\\\\WorkOfficeFREE\\\\CodingLab\\\\challenge0921\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\corne\\\\Unsyncro\\\\WorkOfficeFREE\\\\CodingLab\\\\challenge0921\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\corne\\\\Unsyncro\\\\WorkOfficeFREE\\\\CodingLab\\\\challenge0921\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';var moment=require('moment');var UpdateForm=/*#__PURE__*/function(_Component){_inherits(UpdateForm,_Component);var _super=_createSuper(UpdateForm);function UpdateForm(props){var _this;_classCallCheck(this,UpdateForm);_this=_super.call(this,props);_this.closePopUp=function(){_this.props.closePopUp();};_this.state={formId:props.form._id,name:\"\"};return _this;}_createClass(UpdateForm,[{key:\"render\",value:// update = (event) => {\n//     let item = event.target\n//     this.setState({\n//         name: item\n//     })\n// }\nfunction render(){var shift=this.props.form.shift;var turtle=this.props.form.turtle;// let observation = this.props.form.observation\n// let nest = this.props.form.nest\nreturn/*#__PURE__*/React.createElement(\"div\",{className:\"popUp\"},\"ID: \",/*#__PURE__*/React.createElement(\"input\",{type:\"text\",placeholder:this.props.form._id,name:\"name\",value:this.state.formId,onChange:this.update}),/*#__PURE__*/React.createElement(\"div\",{id:\"shift\"},/*#__PURE__*/React.createElement(\"h5\",null,moment(shift.date).format(\"Do/MM/YY\")),/*#__PURE__*/React.createElement(\"h4\",null,shift.firstName,\" \",shift.lastName)),/*#__PURE__*/React.createElement(\"div\",{id:\"turtle\"},/*#__PURE__*/React.createElement(\"div\",{id:\"plain\"},\"Plain: \",turtle.dimensions.plain.length,\", \",turtle.dimensions.plain.width),/*#__PURE__*/React.createElement(\"div\",{id:\"curve\"},\"Curve: \",turtle.dimensions.curve.length,\", \",turtle.dimensions.curve.width),/*#__PURE__*/React.createElement(\"p\",null,\"Species: \",turtle.species),/*#__PURE__*/React.createElement(\"p\",null,\"Gender: \",turtle.gender,\" \"),/*#__PURE__*/React.createElement(\"p\",null,\" Status: \",turtle.condition.status),/*#__PURE__*/React.createElement(\"p\",null,\" Stage: \",turtle.condition.stage)),/*#__PURE__*/React.createElement(\"button\",{onClick:this.closePopUp},\" Close \"));}}]);return UpdateForm;}(Component);export default UpdateForm;","map":{"version":3,"sources":["C:/Users/corne/Unsyncro/WorkOfficeFREE/CodingLab/challenge0921/src/Components/Spreadsheet/UpdateForm.js"],"names":["React","Component","moment","require","UpdateForm","props","closePopUp","state","formId","form","_id","name","shift","turtle","update","date","format","firstName","lastName","dimensions","plain","length","width","curve","species","gender","condition","status","stage"],"mappings":"gvBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,GAAMC,CAAAA,MAAM,CAAGC,OAAO,CAAC,QAAD,CAAtB,C,GAEMC,CAAAA,U,wGACF,oBAAYC,KAAZ,CAAmB,4CACf,uBAAMA,KAAN,EADe,MASnBC,UATmB,CASN,UAAM,CACf,MAAKD,KAAL,CAAWC,UAAX,GACH,CAXkB,CAEf,MAAKC,KAAL,CAAa,CACTC,MAAM,CAAEH,KAAK,CAACI,IAAN,CAAWC,GADV,CAETC,IAAI,CAAE,EAFG,CAAb,CAFe,aAOlB,C,6CAMD;AACA;AACA;AACA;AACA;AACA;AAEA,iBAAS,CAEL,GAAIC,CAAAA,KAAK,CAAG,KAAKP,KAAL,CAAWI,IAAX,CAAgBG,KAA5B,CACA,GAAIC,CAAAA,MAAM,CAAG,KAAKR,KAAL,CAAWI,IAAX,CAAgBI,MAA7B,CACA;AACA;AAEA,mBACI,2BAAK,SAAS,CAAC,OAAf,sBACQ,6BAAO,IAAI,CAAC,MAAZ,CAAmB,WAAW,CAAE,KAAKR,KAAL,CAAWI,IAAX,CAAgBC,GAAhD,CAAqD,IAAI,CAAC,MAA1D,CAAiE,KAAK,CAAE,KAAKH,KAAL,CAAWC,MAAnF,CAA2F,QAAQ,CAAE,KAAKM,MAA1G,EADR,cAEI,2BAAK,EAAE,CAAC,OAAR,eACI,8BAAKZ,MAAM,CAACU,KAAK,CAACG,IAAP,CAAN,CAAmBC,MAAnB,CAA0B,UAA1B,CAAL,CADJ,cAEI,8BAAKJ,KAAK,CAACK,SAAX,KAAuBL,KAAK,CAACM,QAA7B,CAFJ,CAFJ,cAMI,2BAAK,EAAE,CAAC,QAAR,eACI,2BAAK,EAAE,CAAC,OAAR,YACWL,MAAM,CAACM,UAAP,CAAkBC,KAAlB,CAAwBC,MADnC,MAC6CR,MAAM,CAACM,UAAP,CAAkBC,KAAlB,CAAwBE,KADrE,CADJ,cAII,2BAAK,EAAE,CAAC,OAAR,YACYT,MAAM,CAACM,UAAP,CAAkBI,KAAlB,CAAwBF,MADpC,MAC8CR,MAAM,CAACM,UAAP,CAAkBI,KAAlB,CAAwBD,KADtE,CAJJ,cAOI,yCAAaT,MAAM,CAACW,OAApB,CAPJ,cAQI,wCAAYX,MAAM,CAACY,MAAnB,KARJ,cASI,yCAAaZ,MAAM,CAACa,SAAP,CAAiBC,MAA9B,CATJ,cAUI,wCAAYd,MAAM,CAACa,SAAP,CAAiBE,KAA7B,CAVJ,CANJ,cAoBI,8BAAQ,OAAO,CAAE,KAAKtB,UAAtB,YApBJ,CADJ,CAwBH,C,wBApDoBL,S,EAuDzB,cAAeG,CAAAA,UAAf","sourcesContent":["import React, { Component } from 'react';\r\nconst moment = require('moment')\r\n\r\nclass UpdateForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            formId: props.form._id,\r\n            name: \"\",\r\n\r\n        }\r\n    }\r\n\r\n    closePopUp = () => {\r\n        this.props.closePopUp()\r\n    }\r\n\r\n    // update = (event) => {\r\n    //     let item = event.target\r\n    //     this.setState({\r\n    //         name: item\r\n    //     })\r\n    // }\r\n\r\n    render() {\r\n\r\n        let shift = this.props.form.shift\r\n        let turtle = this.props.form.turtle\r\n        // let observation = this.props.form.observation\r\n        // let nest = this.props.form.nest\r\n\r\n        return (\r\n            <div className=\"popUp\">\r\n                ID: <input type=\"text\" placeholder={this.props.form._id} name=\"name\" value={this.state.formId} onChange={this.update} />\r\n                <div id=\"shift\">\r\n                    <h5>{moment(shift.date).format(\"Do/MM/YY\")}</h5>\r\n                    <h4>{shift.firstName} {shift.lastName}</h4>\r\n                </div>\r\n                <div id=\"turtle\">\r\n                    <div id=\"plain\">\r\n                       Plain: {turtle.dimensions.plain.length}, {turtle.dimensions.plain.width}\r\n                    </div>\r\n                    <div id=\"curve\">\r\n                        Curve: {turtle.dimensions.curve.length}, {turtle.dimensions.curve.width}\r\n                    </div>\r\n                    <p>Species: {turtle.species}</p>\r\n                    <p>Gender: {turtle.gender} </p>\r\n                    <p> Status: {turtle.condition.status}</p>\r\n                    <p> Stage: {turtle.condition.stage}</p>\r\n                </div>\r\n\r\n\r\n                <button onClick={this.closePopUp}> Close </button>\r\n            </div>)\r\n\r\n    }\r\n}\r\n\r\nexport default UpdateForm;"]},"metadata":{},"sourceType":"module"}