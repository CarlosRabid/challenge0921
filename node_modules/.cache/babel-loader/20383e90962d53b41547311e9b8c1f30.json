{"ast":null,"code":"import _createForOfIteratorHelper from\"C:\\\\Users\\\\corne\\\\Unsyncro\\\\WorkOfficeFREE\\\\CodingLab\\\\challenge0921\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";import _regeneratorRuntime from\"C:\\\\Users\\\\corne\\\\Unsyncro\\\\WorkOfficeFREE\\\\CodingLab\\\\challenge0921\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _defineProperty from\"C:\\\\Users\\\\corne\\\\Unsyncro\\\\WorkOfficeFREE\\\\CodingLab\\\\challenge0921\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _asyncToGenerator from\"C:\\\\Users\\\\corne\\\\Unsyncro\\\\WorkOfficeFREE\\\\CodingLab\\\\challenge0921\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:\\\\Users\\\\corne\\\\Unsyncro\\\\WorkOfficeFREE\\\\CodingLab\\\\challenge0921\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\corne\\\\Unsyncro\\\\WorkOfficeFREE\\\\CodingLab\\\\challenge0921\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\corne\\\\Unsyncro\\\\WorkOfficeFREE\\\\CodingLab\\\\challenge0921\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\corne\\\\Unsyncro\\\\WorkOfficeFREE\\\\CodingLab\\\\challenge0921\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import FormGroup from'@material-ui/core/FormGroup';import FormControlLabel from'@material-ui/core/FormControlLabel';import Checkbox from'@material-ui/core/Checkbox';var ChartFilters=/*#__PURE__*/function(_Component){_inherits(ChartFilters,_Component);var _super=_createSuper(ChartFilters);function ChartFilters(){var _this;_classCallCheck(this,ChartFilters);_this=_super.call(this);_this.removeEmptyFilters=function(filters){var names=Object.keys(filters);for(var _i=0,_names=names;_i<_names.length;_i++){var name=_names[_i];if(filters[name].length===0){delete filters[name];}}};_this.extractFilters=function(){var species=[\"Cc\",\"Lo\",\"Cm\",\"Ei\",\"Dc\"];var tides=[\"high\",\"high-to-low\",\"low\",\"low-to-high\"];var genders=[\"male\",\"female\"];var filters={\"turtle.species\":[],\"observation.tide\":[],\"turtle.gender\":[]};species.forEach(function(s){return _this.state[s]?filters[\"turtle.species\"].push(s):null;});tides.forEach(function(t){return _this.state[t]?filters[\"observation.tide\"].push(t):null;});genders.forEach(function(g){return _this.state[g]?filters[\"turtle.gender\"].push(g):null;});_this.removeEmptyFilters(filters);return filters;};_this.handleChange=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(e){var filters;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!_this.state[e.target.value]){_context.next=5;break;}_context.next=3;return _this.setState(_defineProperty({},e.target.name,null));case 3:_context.next=7;break;case 5:_context.next=7;return _this.setState(_defineProperty({},e.target.name,e.target.value));case 7:filters=_this.extractFilters();_this.props.getRelevantData(filters);case 9:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();_this.createCheckMark=function(info){return/*#__PURE__*/React.createElement(FormControlLabel,{control:/*#__PURE__*/React.createElement(Checkbox,{name:info.value,color:info.color,checked:_this.state[info.value],onChange:_this.handleChange,value:info.value}),label:info.label});};_this.getCheckMarks=function(filter){var green=\"primary\";var blue=\"secondary\";var pink=\"default\";var filters={species:[{label:\"Caretta Caretta\",value:\"Cc\",color:green},{label:\"Lepidochelys Olivacea\",value:\"Lo\",color:green},{label:\"Chelonia Mydas\",value:\"Cm\",color:green},{label:\"Eretmochelys imbricata\",value:\"Ei\",color:green},{label:\"Dermochelys coriacea\",value:\"Dc\",color:green}],tides:[{label:\"High\",value:\"high\",color:blue},{label:\"High to Low\",value:\"high-to-low\",color:blue},{label:\"Low\",value:\"low\",color:blue},{label:\"Low to High\",value:\"low-to-high\",color:blue}],gender:[{label:\"Male\",value:\"male\",color:pink},{label:\"Female\",value:\"female\",color:pink}]};var checkmarks=[];var _iterator=_createForOfIteratorHelper(filters[filter]),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var info=_step.value;checkmarks.push(_this.createCheckMark(info));}}catch(err){_iterator.e(err);}finally{_iterator.f();}return checkmarks;};_this.state={};return _this;}_createClass(ChartFilters,[{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/React.createElement(\"div\",{className:\"chart-filters\"},/*#__PURE__*/React.createElement(\"span\",null,\"Filters\"),/*#__PURE__*/React.createElement(\"div\",null,[\"species\",\"tides\",\"gender\"].map(function(filter){return/*#__PURE__*/React.createElement(FormGroup,{row:true},/*#__PURE__*/React.createElement(\"div\",{className:\"filter-group\"},/*#__PURE__*/React.createElement(\"span\",null,filter.toUpperCase()),/*#__PURE__*/React.createElement(\"div\",{className:\"chart-checkboxes\"},_this2.getCheckMarks(filter))));})));}}]);return ChartFilters;}(Component);export default ChartFilters;","map":{"version":3,"sources":["C:/Users/corne/Unsyncro/WorkOfficeFREE/CodingLab/challenge0921/src/Components/Analytics/ChartFilters.js"],"names":["React","Component","FormGroup","FormControlLabel","Checkbox","ChartFilters","removeEmptyFilters","filters","names","Object","keys","name","length","extractFilters","species","tides","genders","forEach","s","state","push","t","g","handleChange","e","target","value","setState","props","getRelevantData","createCheckMark","info","color","label","getCheckMarks","filter","green","blue","pink","gender","checkmarks","map","toUpperCase"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nclass ChartFilters extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {}\r\n    }\r\n\r\n    removeEmptyFilters = (filters) => {\r\n        const names = Object.keys(filters)\r\n        for (let name of names) {\r\n            if (filters[name].length === 0) {\r\n                delete filters[name]\r\n            }\r\n        }\r\n    }\r\n\r\n    extractFilters = () => {\r\n        const species = [\"Cc\", \"Lo\", \"Cm\", \"Ei\", \"Dc\"]\r\n        const tides = [\"high\", \"high-to-low\", \"low\", \"low-to-high\"]\r\n        const genders = [\"male\", \"female\"]\r\n\r\n        const filters = { \"turtle.species\": [], \"observation.tide\": [], \"turtle.gender\": [] }\r\n\r\n        species.forEach(s => this.state[s] ? filters[\"turtle.species\"].push(s) : null)\r\n        tides.forEach(t => this.state[t] ? filters[\"observation.tide\"].push(t) : null)\r\n        genders.forEach(g => this.state[g] ? filters[\"turtle.gender\"].push(g) : null)\r\n\r\n        this.removeEmptyFilters(filters)\r\n        return filters\r\n    }\r\n\r\n    handleChange = async (e) => {\r\n        if (this.state[e.target.value]) {\r\n            await this.setState({ [e.target.name]: null })\r\n        }\r\n        else {\r\n            await this.setState({ [e.target.name]: e.target.value })\r\n        }\r\n\r\n        const filters = this.extractFilters()\r\n        this.props.getRelevantData(filters)\r\n    }\r\n\r\n    createCheckMark = info => {\r\n        return <FormControlLabel\r\n            control={\r\n                <Checkbox name={info.value}\r\n                    color={info.color} checked={this.state[info.value]}\r\n                    onChange={this.handleChange} value={info.value} />}\r\n            label={info.label}\r\n        />\r\n    }\r\n\r\n    getCheckMarks = (filter) => {\r\n        const green = \"primary\"\r\n        const blue = \"secondary\"\r\n        const pink = \"default\"\r\n\r\n        const filters = {\r\n            species: [\r\n                { label: \"Caretta Caretta\", value: \"Cc\", color: green },\r\n                { label: \"Lepidochelys Olivacea\", value: \"Lo\", color: green },\r\n                { label: \"Chelonia Mydas\", value: \"Cm\", color: green },\r\n                { label: \"Eretmochelys imbricata\", value: \"Ei\", color: green },\r\n                { label: \"Dermochelys coriacea\", value: \"Dc\", color: green }\r\n            ],\r\n            tides: [\r\n                { label: \"High\", value: \"high\", color: blue },\r\n                { label: \"High to Low\", value: \"high-to-low\", color: blue },\r\n                { label: \"Low\", value: \"low\", color: blue },\r\n                { label: \"Low to High\", value: \"low-to-high\", color: blue },\r\n            ],\r\n            gender: [\r\n                { label: \"Male\", value: \"male\", color: pink },\r\n                { label: \"Female\", value: \"female\", color: pink },\r\n            ]\r\n        }\r\n\r\n        const checkmarks = []\r\n\r\n        for (let info of filters[filter]) {\r\n            checkmarks.push(this.createCheckMark(info))\r\n        }\r\n\r\n        return checkmarks\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart-filters\">\r\n                <span>Filters</span>\r\n                <div>\r\n                    {[\"species\", \"tides\", \"gender\"].map(filter => (\r\n                        <FormGroup row >\r\n                            <div className=\"filter-group\">\r\n                                <span>{filter.toUpperCase()}</span>\r\n                                <div className=\"chart-checkboxes\">{this.getCheckMarks(filter)}</div>\r\n                            </div>\r\n                        </FormGroup>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChartFilters;"]},"metadata":{},"sourceType":"module"}