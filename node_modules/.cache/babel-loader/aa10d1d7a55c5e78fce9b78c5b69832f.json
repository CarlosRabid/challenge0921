{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\corne\\\\Unsyncro\\\\WorkOfficeFREE\\\\CodingLab\\\\challenge0921\\\\src\\\\Components\\\\Analytics\\\\DynamicChart.js\";\nimport React, { Component } from 'react';\nimport { ComposedChart, Bar, XAxis, YAxis, ResponsiveContainer, Tooltip, Legend, Line } from 'recharts';\nimport moment from 'moment';\nimport Axios from 'axios';\nimport ChartFilters from './ChartFilters';\nimport '../../styles/analytics.css';\nimport * as constant from '../Form/constant';\nimport Loader from '../Loader';\nconst dinamicRoute = window.location.host.includes(\"localhost\") ? constant.LOCAL_GET : constant.PROD_GET;\n\nclass DynamicChart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.convertDate = (date, group) => {\n      let fd;\n      let newDate;\n\n      if (group === \"day\") {\n        fd = date * (1000 * 60 * 60 * 24);\n        newDate = moment(fd).format(\"MMMM Do YYYY\");\n      } else if (group === \"month\") {\n        date = parseInt(date);\n        let addYear = Math.floor(date / 12);\n        let toMultiply = date % 12 / 12;\n        let year = 1970 + addYear;\n        let month = Math.ceil(toMultiply * 12) + 1;\n        newDate = month + \" \" + year;\n      } else if (group === \"year\") {\n        newDate = JSON.parse(date) + 1970;\n      } else if (group === \"week\") {\n        fd = date * (1000 * 60 * 60 * 24 * 7);\n        newDate = moment(fd).format('w YYYY');\n      }\n\n      return newDate;\n    };\n\n    this.getRelevantData = async filters => {\n      if (!filters) {\n        filters = {};\n      }\n\n      const group = this.state.time;\n      this.setState({\n        loadingData: true\n      });\n      const response = await Axios.post(`${dinamicRoute}/formData/${group}`, filters);\n      setTimeout(() => {\n        //for presentation only\n        this.setState({\n          data: response.data.map(d => {\n            return { ...d,\n              moonPhase: this.getMoonphases(d.moonPhase),\n              date: this.convertDate(d.date, group)\n            };\n          }),\n          loadingData: false\n        });\n      }, 1500);\n    };\n\n    this.handleChange = async e => {\n      let data = [...this.state.data];\n      let name = e.target.name;\n      let newData = data.splice(0); // Only for User Experience purposes (to force chart to reanimate)\n\n      await this.setState({\n        [name]: e.target.value,\n        data: newData\n      });\n      this.getRelevantData();\n    };\n\n    this.getMoonphases = data => {\n      let moonphase;\n\n      if (data === \"Full Moon\") {\n        return moonphase = 4;\n      } else if (data === \"Third Quarter\") {\n        return moonphase = 3;\n      } else if (data === \"New Moon\") {\n        return moonphase = 2;\n      } else if (data === \"First Quarter\") {\n        return moonphase = 1;\n      } else {\n        return moonphase = null;\n      }\n    };\n\n    this.state = {\n      data: [],\n      countBy: \"turtleCount\",\n      time: \"day\"\n    };\n    this.loadingData = true;\n    this.dinamicRoute = props.dinamicRoute;\n  }\n\n  async componentDidMount() {\n    await this.getRelevantData();\n  }\n\n  render() {\n    let countOptions = [\"turtleCount\", \"nestCount\", \"eggCount\"];\n    let timeOptions = [\"day\", \"week\", \"month\", \"year\"];\n    let notShowingMoonPhases;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"analytics-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"analytics-area\",\n      style: {\n        width: '100vw',\n        height: '70%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    }, \"Count: \"), /*#__PURE__*/React.createElement(\"select\", {\n      className: \"a-select\",\n      id: \"countBy\",\n      name: \"countBy\",\n      value: this.state.countBy,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    }, countOptions.map(o => /*#__PURE__*/React.createElement(\"option\", {\n      value: o,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 48\n      }\n    }, o))), /*#__PURE__*/React.createElement(\"select\", {\n      className: \"a-select\",\n      id: \"time\",\n      name: \"time\",\n      value: this.state.time,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }\n    }, timeOptions.map(o => /*#__PURE__*/React.createElement(\"option\", {\n      value: o,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 47\n      }\n    }, o))), this.state.loadingData ? /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 47\n      }\n    }) : null, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n      width: \"100%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ComposedChart, {\n      width: 600,\n      height: 300,\n      data: this.state.data,\n      margin: {\n        top: 20,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"date\",\n      stroke: \"black\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      yAxisId: \"left\",\n      orientation: \"left\",\n      stroke: \"rgba(239, 221, 111)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 29\n      }\n    }), this.state.time === \"day\" ? /*#__PURE__*/React.createElement(YAxis, {\n      yAxisId: \"right\",\n      orientation: \"right\",\n      stroke: \"#81C14B\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 33\n      }\n    }) : notShowingMoonPhases = true, /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      color: \"#FFFFFF\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Bar, {\n      yAxisId: \"left\",\n      dataKey: this.state.countBy,\n      fill: \"rgba(239, 221, 111, 0.8)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 29\n      }\n    }), this.state.time === \"day\" ? /*#__PURE__*/React.createElement(Line, {\n      strokeWidth: 4,\n      stroke: \"rgba(129, 193, 75, 0.7)\",\n      type: \"monotone\",\n      yAxisId: \"right\",\n      dataKey: \"moonPhase\",\n      fill: \"#82ca9d\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 33\n      }\n    }) : notShowingMoonPhases = true))), /*#__PURE__*/React.createElement(ChartFilters, {\n      getRelevantData: this.getRelevantData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default DynamicChart;","map":{"version":3,"sources":["C:/Users/corne/Unsyncro/WorkOfficeFREE/CodingLab/challenge0921/src/Components/Analytics/DynamicChart.js"],"names":["React","Component","ComposedChart","Bar","XAxis","YAxis","ResponsiveContainer","Tooltip","Legend","Line","moment","Axios","ChartFilters","constant","Loader","dinamicRoute","window","location","host","includes","LOCAL_GET","PROD_GET","DynamicChart","constructor","props","convertDate","date","group","fd","newDate","format","parseInt","addYear","Math","floor","toMultiply","year","month","ceil","JSON","parse","getRelevantData","filters","state","time","setState","loadingData","response","post","setTimeout","data","map","d","moonPhase","getMoonphases","handleChange","e","name","target","newData","splice","value","moonphase","countBy","componentDidMount","render","countOptions","timeOptions","notShowingMoonPhases","width","height","o","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { ComposedChart, Bar, XAxis, YAxis, ResponsiveContainer, Tooltip, Legend, Line } from 'recharts';\r\nimport moment from 'moment'\r\nimport Axios from 'axios';\r\nimport ChartFilters from './ChartFilters';\r\nimport '../../styles/analytics.css'\r\nimport * as constant from '../Form/constant'\r\nimport Loader from '../Loader';\r\n\r\nconst dinamicRoute = (\r\n    window.location.host.includes(\"localhost\") ?\r\n        constant.LOCAL_GET : constant.PROD_GET\r\n)\r\n\r\nclass DynamicChart extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: [],\r\n            countBy: \"turtleCount\",\r\n            time: \"day\",\r\n        }\r\n        this.loadingData = true\r\n        this.dinamicRoute = props.dinamicRoute\r\n    }\r\n\r\n    convertDate = (date, group) => {\r\n        let fd\r\n        let newDate\r\n        if (group === \"day\") {\r\n            fd = date * (1000 * 60 * 60 * 24)\r\n            newDate = moment(fd).format(\"MMMM Do YYYY\")\r\n        } else if (group === \"month\") {\r\n            date = parseInt(date)\r\n            let addYear = Math.floor(date / 12)\r\n            let toMultiply = (date % 12) / 12\r\n            let year = 1970 + addYear\r\n            let month = (Math.ceil(toMultiply * 12)) + 1\r\n            newDate = month + \" \" + year\r\n        } else if (group === \"year\") {\r\n            newDate = JSON.parse(date) + 1970\r\n        } else if (group === \"week\") {\r\n            fd = date * (1000 * 60 * 60 * 24 * 7)\r\n            newDate = moment(fd).format('w YYYY')\r\n        }\r\n        return newDate\r\n    }\r\n\r\n    getRelevantData = async (filters) => {\r\n        if (!filters) { filters = {} }\r\n        const group = this.state.time\r\n        this.setState({ loadingData: true })\r\n        const response = await Axios.post(`${dinamicRoute}/formData/${group}`, filters)\r\n        setTimeout(() => { //for presentation only\r\n            this.setState({\r\n                data: response.data.map(d => {\r\n                    return { ...d, moonPhase: this.getMoonphases(d.moonPhase), date: this.convertDate(d.date, group) }\r\n                }), loadingData: false\r\n            })\r\n        }, 1500)\r\n    }\r\n    handleChange = async (e) => {\r\n        let data = [...this.state.data]\r\n        let name = e.target.name\r\n        let newData = data.splice(0) // Only for User Experience purposes (to force chart to reanimate)\r\n        await this.setState({ [name]: e.target.value, data: newData })\r\n        this.getRelevantData()\r\n    }\r\n\r\n    getMoonphases = (data) => {\r\n        let moonphase\r\n        if (data === \"Full Moon\") {\r\n            return moonphase = 4\r\n        } else if (data === \"Third Quarter\") {\r\n            return moonphase = 3\r\n        } else if (data === \"New Moon\") {\r\n            return moonphase = 2\r\n        } else if (data === \"First Quarter\") {\r\n            return moonphase = 1\r\n        } else {\r\n            return moonphase = null\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.getRelevantData()\r\n    }\r\n\r\n    render() {\r\n        let countOptions = [\"turtleCount\", \"nestCount\", \"eggCount\"]\r\n        let timeOptions = [\"day\", \"week\", \"month\", \"year\"]\r\n        let notShowingMoonPhases\r\n\r\n        return (\r\n            <div className=\"analytics-page\">\r\n\r\n                <div className=\"analytics-area\" style={{ width: '100vw', height: '70%' }} >\r\n                    <h3>Count: </h3>\r\n                    <select className=\"a-select\" id=\"countBy\" name=\"countBy\" value={this.state.countBy} onChange={this.handleChange}>\r\n                        {countOptions.map(o => <option value={o}>{o}</option>)}\r\n                    </select>\r\n                    <select className=\"a-select\" id=\"time\" name=\"time\" value={this.state.time} onChange={this.handleChange}>\r\n                        {timeOptions.map(o => <option value={o}>{o}</option>)}\r\n                    </select>\r\n\r\n                    {this.state.loadingData ? <Loader /> : null}\r\n\r\n                    <ResponsiveContainer width=\"100%\">\r\n                        <ComposedChart width={600} height={300} data={this.state.data}\r\n                            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n\r\n                            <XAxis dataKey=\"date\" stroke=\"black\" />\r\n                            <YAxis yAxisId=\"left\" orientation=\"left\" stroke=\"rgba(239, 221, 111)\" />\r\n                            {this.state.time === \"day\" ?\r\n                                <YAxis yAxisId=\"right\" orientation=\"right\" stroke=\"#81C14B\" />\r\n                                : notShowingMoonPhases = true\r\n                            }\r\n                            <Tooltip />\r\n                            <Legend color=\"#FFFFFF\" />\r\n                            <Bar yAxisId=\"left\" dataKey={this.state.countBy} fill=\"rgba(239, 221, 111, 0.8)\" />\r\n                            {this.state.time === \"day\" ?\r\n                                <Line strokeWidth={4} stroke=\"rgba(129, 193, 75, 0.7)\" type=\"monotone\" yAxisId=\"right\" dataKey=\"moonPhase\" fill=\"#82ca9d\" />\r\n\r\n                                : notShowingMoonPhases = true\r\n                            }\r\n                        </ComposedChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n\r\n                <ChartFilters getRelevantData={this.getRelevantData} />\r\n\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DynamicChart;"]},"metadata":{},"sourceType":"module"}