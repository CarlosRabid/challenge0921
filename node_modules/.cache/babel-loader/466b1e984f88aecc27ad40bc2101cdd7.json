{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\corne\\\\Unsyncro\\\\WorkOfficeFREE\\\\CodingLab\\\\challenge0921\\\\src\\\\Components\\\\Form\\\\Form.js\";\nimport React, { Component } from 'react';\nimport ShiftInput from './ShiftInput';\nimport Turtle from './Turtle';\nimport NestInput from './NestInput';\nimport Button from '@material-ui/core/Button';\nimport './form.css';\nimport { withTranslation } from 'react-i18next';\nimport { Typography } from '@material-ui/core';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\nimport BeachLocations from './BeachLocations';\nimport Comments from './ObservationComments';\nimport { Redirect } from 'react-router-dom';\nimport * as constant from './constant';\n\nconst axios = require('axios');\n\nconst dinamicRoute = window.location.host.includes(\"localhost\") ? constant.LOCAL_GET : constant.PROD_GET;\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleBeachInput = async input => {\n      let locationLatitude = { ...this.state.locationLatitude\n      };\n      let locationLongitude = { ...this.state.locationLongitude\n      };\n      let selectedBeach = { ...this.state.selectedBeach\n      };\n      locationLatitude = input.locationLatitude;\n      locationLongitude = input.locationLongitude;\n      selectedBeach = input.selectedBeach;\n      await this.setState({\n        locationLatitude,\n        locationLongitude,\n        selectedBeach\n      });\n    };\n\n    this.handleSpecies = async input => {\n      let species = { ...this.state.species\n      };\n      species = input;\n      await this.setState({\n        species\n      });\n    };\n\n    this.handleCondition = async input => {\n      let conditionstage = { ...this.state.conditionstage\n      };\n      let conditionstat = { ...this.state.conditionstat\n      };\n      conditionstage = input;\n      conditionstat = input.charAt(0) == \"a\" ? 'Alive' : 'Death';\n      await this.setState({\n        conditionstage,\n        conditionstat\n      });\n    };\n\n    this.handleName = async (first, last) => {\n      let firstName = { ...this.state.firstName\n      };\n      let lastName = { ...this.state.lastName\n      };\n      firstName = first;\n      lastName = last;\n      await this.setState({\n        firstName,\n        lastName\n      });\n      localStorage.setItem('firstName', this.state.firstName);\n      localStorage.setItem('lastName', this.state.lastName);\n    };\n\n    this.handleDimentions = async (id, value) => {\n      let key = id;\n      await this.setState({\n        [key]: value\n      });\n    };\n\n    this.handleDate = async (first, last) => {\n      let date = { ...this.state.date\n      };\n      let time = { ...this.state.time\n      };\n      date = first;\n      time = last;\n      await this.setState({\n        date,\n        time\n      });\n    };\n\n    this.handleShift = async input => {\n      let firstName = { ...this.state.firstName\n      };\n      let lastName = { ...this.state.lastName\n      };\n      let date = { ...this.state.date\n      };\n      let time = { ...this.state.time\n      };\n      firstName = input.firstName;\n      lastName = input.lastName;\n      date = input.date;\n      time = input.time;\n      await this.setState({\n        firstName,\n        lastName,\n        date,\n        time\n      });\n    };\n\n    this.handleNest = async input => {\n      let eggCount = { ...this.state.eggCount\n      };\n      let layTime = { ...this.state.layTime\n      };\n      let hatchEst = { ...this.state.hatchEst\n      };\n      let rehomed = { ...this.state.rehomed\n      };\n      let salvageable = { ...this.state.salvageable\n      };\n      let daten = { ...this.state.daten\n      };\n      let timen = { ...this.state.timen\n      };\n      eggCount = input.eggCount;\n      layTime = input.layTime;\n      hatchEst = input.hatchEst;\n      rehomed = input.rehomed;\n      salvageable = input.salvageable;\n      daten = input.daten;\n      timen = input.timen;\n      await this.setState({\n        eggCount,\n        layTime,\n        hatchEst,\n        rehomed,\n        salvageable,\n        daten,\n        timen\n      });\n    };\n\n    this.handleLab = input => {\n      let salvageable = { ...this.state.salvageable\n      };\n      salvageable = input.salvageable;\n      this.setState({\n        salvageable\n      });\n    };\n\n    this.checkTurtleData = () => {\n      let hasTurtle = { ...this.state.hasTurtle\n      };\n      let turtle = {\n        species: this.state.species,\n        gender: this.state.gender,\n        conditionstat: this.state.conditionstat,\n        conditionstage: this.state.conditionstage,\n        dimensionsPl: this.state.dimensionsPl,\n        dimensionsPw: this.state.dimensionsPw,\n        dimensionsCl: this.state.dimensionsCl,\n        dimensionsCw: this.state.dimensionsCw,\n        markingsRs: this.state.markingsRs,\n        markingsLs: this.state.markingsLs\n      };\n      hasTurtle = Object.keys(turtle).some(function (k) {\n        return turtle[k] !== null;\n      });\n      this.setState({\n        hasTurtle\n      });\n    };\n\n    this.checkNest = () => {\n      let hasNest = { ...this.state.hasNest\n      };\n      let nest = {\n        eggCount: this.state.eggCount,\n        layTime: this.state.layTime,\n        hatchEst: this.state.hatchEst,\n        rehomed: this.state.rehomed,\n        salvageable: this.state.salvageable,\n        layTime: this.state.daten\n      };\n      hasNest = Object.keys(nest).some(function (k) {\n        return nest[k] !== null;\n      });\n      this.setState({\n        hasNest\n      });\n    };\n\n    this.handleGender = input => {\n      let gender = { ...this.state.gender\n      };\n      gender = input;\n      this.setState({\n        gender\n      });\n    };\n\n    this.handleComments = input => {\n      let comments = { ...this.state.comments\n      };\n      comments = input;\n      this.setState({\n        comments\n      });\n    };\n\n    this.submitNewForm = async (shift, observation, turtle, nest) => {\n      await this.checkTurtleData();\n      await this.checkNest();\n      const firstName = this.state.firstName || localStorage.getItem(\"firstName\");\n      const lastName = this.state.lastName || localStorage.getItem(\"lastName\");\n\n      if (!(firstName && lastName)) {\n        return alert(\"Please enter your first and last name\");\n      }\n\n      if (!this.state.selectedBeach) {\n        return alert(\"Please select a beach\");\n      }\n\n      let form = {\n        shift: {\n          firstName,\n          lastName\n        },\n        observation: {\n          date: Date(this.state.date),\n          location: this.state.selectedBeach,\n          moonPhase: 'First Quarter',\n          tide: 'low-to-high',\n          comments: this.state.comments\n        },\n        turtle: {\n          condition: {\n            status: this.state.conditionstat,\n            stage: this.state.conditionstage\n          },\n          dimensions: {\n            plain: {\n              length: this.state.dimensionsPl,\n              width: this.state.dimensionsPw\n            },\n            curve: {\n              length: this.state.dimensionsCl,\n              width: this.state.dimensionsCw\n            }\n          },\n          markings: {\n            rightSide: this.state.markingsRs,\n            leftSide: this.state.markingsLs\n          },\n          hasData: this.state.hasTurtle,\n          species: this.state.species,\n          gender: this.state.gender\n        },\n        nest: {\n          hasData: this.state.hasNest,\n          layTime: this.state.daten,\n          eggCount: this.state.eggCount,\n          hatchEst: this.state.daten,\n          rehomed: this.state.rehomed,\n          salvageable: this.state.salvageable\n        }\n      };\n\n      if (navigator.onLine) {\n        const response = await axios.post(`${dinamicRoute}/mega-form`, form);\n        console.log(response);\n        console.log('new form saved!');\n        alert('Successfully submitted');\n      } else {\n        let savedForms = JSON.parse(localStorage.getItem(\"savedForms\") || \"[]\");\n        savedForms.push(form);\n        localStorage.setItem('savedForms', JSON.stringify(savedForms));\n        console.log(\"Saved form locally for later post\");\n        alert('Cannot submit, will try again later');\n      }\n    };\n\n    this.handleExpandClick = event => {\n      let showFpart = true;\n      this.setState({\n        showFpart: showFpart\n      });\n    };\n\n    this.state = {\n      locationLatitude: \"\",\n      // set-up by beach selection\n      locationLongitude: \"\",\n      // set-up by beach selection\n      selectedBeach: \"\",\n      firstName: null,\n      lastName: null,\n      date: null,\n      time: \"\",\n      species: null,\n      gender: null,\n      conditionstat: null,\n      conditionstage: null,\n      dimensionsPl: null,\n      dimensionsPw: null,\n      dimensionsCl: null,\n      dimensionsCw: null,\n      markingsRs: null,\n      markingsLs: null,\n      comments: \"\",\n      showNest: null,\n      showFpart: false,\n      hasTurtle: null,\n      hasNest: null,\n      eggCount: null,\n      layTime: null,\n      hatchEst: null,\n      rehomed: null,\n      salvageable: null,\n      daten: null,\n      timen: null\n    };\n  }\n\n  render() {\n    const {\n      t\n    } = this.props;\n\n    if (!this.props.isLoggedIn()) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 48\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"formContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }\n    }, t('TORTUGA WATCH FORM')), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"beachButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BeachLocations, {\n      handleBeachInput: this.handleBeachInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ExpansionPanel, {\n      className: \"shift\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ExpansionPanelSummary, {\n      expandIcon: /*#__PURE__*/React.createElement(ExpandMoreIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 37\n        }\n      }),\n      \"aria-controls\": \"panel1c-content\",\n      id: \"shift\" // style={{border: '10px'}}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"helptext\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      className: \"Shift\",\n      variant: \"h6\",\n      component: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 29\n      }\n    }, t('Shift')))), /*#__PURE__*/React.createElement(ShiftInput, {\n      forms: this.state.forms,\n      handleName: this.handleName,\n      handleDate: this.handleDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(ExpansionPanel, {\n      TransitionProps: {\n        unmountOnExit: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ExpansionPanelSummary, {\n      expandIcon: /*#__PURE__*/React.createElement(ExpandMoreIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 37\n        }\n      }),\n      \"aria-controls\": \"panel1c-content\",\n      id: \"turtles\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"helptext\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      className: \"turtles\",\n      variant: \"h6\",\n      component: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 29\n      }\n    }, t('Turtle Information')))), /*#__PURE__*/React.createElement(Turtle, {\n      handleGender: this.handleGender,\n      handleCondition: this.handleCondition,\n      handleSpecies: this.handleSpecies,\n      forms: this.state.forms,\n      handleTurtInput: this.state.handleTurtInput,\n      handleDimentions: this.handleDimentions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(ExpansionPanel, {\n      TransitionProps: {\n        unmountOnExit: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ExpansionPanelSummary, {\n      expandIcon: /*#__PURE__*/React.createElement(ExpandMoreIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 37\n        }\n      }),\n      \"aria-controls\": \"panel1c-content\",\n      id: \"turtles\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"helptext\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      className: \"nests\",\n      variant: \"h6\",\n      component: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 29\n      }\n    }, t('Nest Information')))), /*#__PURE__*/React.createElement(NestInput, {\n      forms: this.state.forms,\n      handleNest: this.handleNest,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Comments, {\n      handleComments: this.handleComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      style: {\n        backgroundColor: '#09bc8a',\n        opacity: 0.9,\n        marginLeft: '0.2em',\n        marginTop: '0.1em'\n      },\n      size: \"medium\",\n      className: \"submit\",\n      onClick: this.submitNewForm,\n      margin: \"normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 17\n      }\n    }, t(' Submit ')));\n  }\n\n}\n\nexport default withTranslation('translation')(Form);","map":{"version":3,"sources":["C:/Users/corne/Unsyncro/WorkOfficeFREE/CodingLab/challenge0921/src/Components/Form/Form.js"],"names":["React","Component","ShiftInput","Turtle","NestInput","Button","withTranslation","Typography","ExpansionPanel","ExpansionPanelSummary","ExpandMoreIcon","FontAwesomeIcon","faSave","BeachLocations","Comments","Redirect","constant","axios","require","dinamicRoute","window","location","host","includes","LOCAL_GET","PROD_GET","Form","constructor","props","handleBeachInput","input","locationLatitude","state","locationLongitude","selectedBeach","setState","handleSpecies","species","handleCondition","conditionstage","conditionstat","charAt","handleName","first","last","firstName","lastName","localStorage","setItem","handleDimentions","id","value","key","handleDate","date","time","handleShift","handleNest","eggCount","layTime","hatchEst","rehomed","salvageable","daten","timen","handleLab","checkTurtleData","hasTurtle","turtle","gender","dimensionsPl","dimensionsPw","dimensionsCl","dimensionsCw","markingsRs","markingsLs","Object","keys","some","k","checkNest","hasNest","nest","handleGender","handleComments","comments","submitNewForm","shift","observation","getItem","alert","form","Date","moonPhase","tide","condition","status","stage","dimensions","plain","length","width","curve","markings","rightSide","leftSide","hasData","navigator","onLine","response","post","console","log","savedForms","JSON","parse","push","stringify","handleExpandClick","event","showFpart","showNest","render","t","isLoggedIn","forms","unmountOnExit","handleTurtInput","backgroundColor","opacity","marginLeft","marginTop"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport ShiftInput from './ShiftInput';\r\nimport Turtle from './Turtle';\r\nimport NestInput from './NestInput';\r\nimport Button from '@material-ui/core/Button';\r\nimport './form.css';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { Typography } from '@material-ui/core';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSave } from '@fortawesome/free-solid-svg-icons'\r\nimport BeachLocations from './BeachLocations';\r\nimport Comments from './ObservationComments';\r\nimport { Redirect } from 'react-router-dom';\r\nimport * as constant from './constant'\r\n\r\nconst axios = require('axios');\r\n\r\nconst dinamicRoute = (\r\n    window.location.host.includes(\"localhost\") ?\r\n        constant.LOCAL_GET : constant.PROD_GET\r\n)\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            locationLatitude: \"\",  // set-up by beach selection\r\n            locationLongitude: \"\", // set-up by beach selection\r\n            selectedBeach: \"\",\r\n            firstName: null,\r\n            lastName: null,\r\n            date: null,\r\n            time: \"\",\r\n            species: null,\r\n            gender: null,\r\n            conditionstat: null,\r\n            conditionstage: null,\r\n            dimensionsPl: null,\r\n            dimensionsPw: null,\r\n            dimensionsCl: null,\r\n            dimensionsCw: null,\r\n            markingsRs: null,\r\n            markingsLs: null,\r\n            comments: \"\",\r\n            showNest: null,\r\n            showFpart: false,\r\n            hasTurtle: null,\r\n            hasNest: null,\r\n            eggCount: null,\r\n            layTime: null,\r\n            hatchEst: null,\r\n            rehomed: null,\r\n            salvageable: null,\r\n            daten: null,\r\n            timen: null,\r\n        }\r\n    }\r\n\r\n    handleBeachInput = async (input) => {\r\n        let locationLatitude = { ...this.state.locationLatitude }\r\n        let locationLongitude = { ...this.state.locationLongitude }\r\n        let selectedBeach = { ...this.state.selectedBeach }\r\n        locationLatitude = input.locationLatitude\r\n        locationLongitude = input.locationLongitude\r\n        selectedBeach = input.selectedBeach\r\n        await this.setState({ locationLatitude, locationLongitude, selectedBeach })\r\n    }\r\n    handleSpecies = async (input) => {\r\n        let species = { ...this.state.species }\r\n        species = input\r\n        await this.setState({ species })\r\n    }\r\n    handleCondition = async (input) => {\r\n        let conditionstage = { ...this.state.conditionstage }\r\n        let conditionstat = { ...this.state.conditionstat }\r\n        conditionstage = input\r\n        conditionstat = (input.charAt(0) == \"a\") ? 'Alive' : 'Death'\r\n        await this.setState({ conditionstage, conditionstat })\r\n    }\r\n    handleName = async (first, last) => {\r\n        let firstName = { ...this.state.firstName }\r\n        let lastName = { ...this.state.lastName }\r\n        firstName = first\r\n        lastName = last\r\n        await this.setState({ firstName, lastName })\r\n        localStorage.setItem('firstName', this.state.firstName)\r\n        localStorage.setItem('lastName', this.state.lastName)\r\n    }\r\n\r\n    handleDimentions = async (id, value) => {\r\n        let key = id\r\n\r\n        await this.setState({ [key]: value })\r\n    }\r\n\r\n    handleDate = async (first, last) => {\r\n        let date = { ...this.state.date }\r\n        let time = { ...this.state.time }\r\n        date = first\r\n        time = last\r\n        await this.setState({ date, time })\r\n    }\r\n    handleShift = async (input) => {\r\n        let firstName = { ...this.state.firstName }\r\n        let lastName = { ...this.state.lastName }\r\n        let date = { ...this.state.date }\r\n        let time = { ...this.state.time }\r\n        firstName = input.firstName\r\n        lastName = input.lastName\r\n        date = input.date\r\n        time = input.time\r\n        await this.setState({ firstName, lastName, date, time })\r\n    }\r\n    handleNest = async (input) => {\r\n        let eggCount = { ...this.state.eggCount }\r\n        let layTime = { ...this.state.layTime }\r\n        let hatchEst = { ...this.state.hatchEst }\r\n        let rehomed = { ...this.state.rehomed }\r\n        let salvageable = { ...this.state.salvageable }\r\n        let daten = { ...this.state.daten }\r\n        let timen = { ...this.state.timen }\r\n        eggCount = input.eggCount\r\n        layTime = input.layTime\r\n        hatchEst = input.hatchEst\r\n        rehomed = input.rehomed\r\n        salvageable = input.salvageable\r\n        daten = input.daten\r\n        timen = input.timen\r\n        await this.setState({ eggCount, layTime, hatchEst, rehomed, salvageable, daten, timen })\r\n    }\r\n    handleLab = (input) => {\r\n        let salvageable = { ...this.state.salvageable }\r\n        salvageable = input.salvageable\r\n        this.setState({ salvageable })\r\n    }\r\n\r\n    checkTurtleData = () => {\r\n        let hasTurtle = { ...this.state.hasTurtle }\r\n        let turtle = {\r\n            species: this.state.species, gender: this.state.gender,\r\n            conditionstat: this.state.conditionstat,\r\n            conditionstage: this.state.conditionstage,\r\n            dimensionsPl: this.state.dimensionsPl,\r\n            dimensionsPw: this.state.dimensionsPw,\r\n            dimensionsCl: this.state.dimensionsCl,\r\n            dimensionsCw: this.state.dimensionsCw,\r\n            markingsRs: this.state.markingsRs,\r\n            markingsLs: this.state.markingsLs,\r\n        }\r\n\r\n        hasTurtle = Object.keys(turtle).some(function (k) {\r\n            return turtle[k] !== null\r\n        })\r\n\r\n        this.setState({\r\n            hasTurtle\r\n        })\r\n    }\r\n    checkNest = () => {\r\n        let hasNest = { ...this.state.hasNest }\r\n        let nest = {\r\n            eggCount: this.state.eggCount,\r\n            layTime: this.state.layTime,\r\n            hatchEst: this.state.hatchEst,\r\n            rehomed: this.state.rehomed,\r\n            salvageable: this.state.salvageable,\r\n            layTime: this.state.daten,\r\n        }\r\n\r\n        hasNest = Object.keys(nest).some(function (k) {\r\n            return nest[k] !== null\r\n        })\r\n\r\n        this.setState({\r\n            hasNest\r\n        })\r\n    }\r\n\r\n    handleGender = (input) => {\r\n        let gender = { ...this.state.gender }\r\n        gender = input\r\n        this.setState({\r\n            gender\r\n        })\r\n    }\r\n\r\n    handleComments = (input) => {\r\n        let comments = { ...this.state.comments }\r\n        comments = input\r\n        this.setState({\r\n            comments\r\n        })\r\n    }\r\n\r\n    submitNewForm = async (shift, observation, turtle, nest) => {\r\n        await this.checkTurtleData()\r\n        await this.checkNest()\r\n\r\n        const firstName = this.state.firstName || localStorage.getItem(\"firstName\")\r\n        const lastName = this.state.lastName || localStorage.getItem(\"lastName\")\r\n\r\n        if(!(firstName && lastName)){\r\n            return alert (\"Please enter your first and last name\")\r\n        }\r\n\r\n        if(!this.state.selectedBeach){\r\n            return alert(\"Please select a beach\")\r\n        }\r\n\r\n        let form = {\r\n            shift: { firstName, lastName },\r\n            observation:\r\n            {\r\n                date: Date(this.state.date),\r\n                location: this.state.selectedBeach,\r\n                moonPhase: 'First Quarter',\r\n                tide: 'low-to-high',\r\n                comments: this.state.comments\r\n            },\r\n            turtle:\r\n            {\r\n                condition: { status: this.state.conditionstat, stage: this.state.conditionstage },\r\n                dimensions: { plain: { length: this.state.dimensionsPl, width: this.state.dimensionsPw }, curve: { length: this.state.dimensionsCl, width: this.state.dimensionsCw } },\r\n                markings: { rightSide: this.state.markingsRs, leftSide: this.state.markingsLs },\r\n                hasData: this.state.hasTurtle,\r\n                species: this.state.species,\r\n                gender: this.state.gender\r\n            },\r\n            nest:\r\n            {\r\n                hasData: this.state.hasNest,\r\n                layTime: this.state.daten,\r\n                eggCount: this.state.eggCount,\r\n                hatchEst: this.state.daten,\r\n                rehomed: this.state.rehomed,\r\n                salvageable: this.state.salvageable\r\n            },\r\n        }\r\n        if(navigator.onLine) {\r\n            const response = await axios.post(`${dinamicRoute}/mega-form`,  form )\r\n            console.log(response)\r\n            console.log('new form saved!')\r\n            alert('Successfully submitted')\r\n        }\r\n        else {\r\n            let savedForms = JSON.parse(localStorage.getItem(\"savedForms\") || \"[]\")\r\n            savedForms.push(form)\r\n            localStorage.setItem('savedForms', JSON.stringify(savedForms))\r\n            console.log(\"Saved form locally for later post\")\r\n            alert('Cannot submit, will try again later')\r\n        }\r\n    }\r\n\r\n    handleExpandClick = (event) => {\r\n        let showFpart = true\r\n        this.setState({ showFpart: showFpart })\r\n    };\r\n\r\n    render() {\r\n        const { t } = this.props;\r\n\r\n        if (!this.props.isLoggedIn()) { return <Redirect to=\"/\" /> }\r\n\r\n        return (\r\n\r\n            <div id=\"formContainer\" >\r\n                <h1>{t('TORTUGA WATCH FORM')}</h1>\r\n                <div id=\"beachButton\" >\r\n                    <BeachLocations handleBeachInput={this.handleBeachInput} />\r\n                </div>\r\n                <br />\r\n                <ExpansionPanel  className=\"shift\" >\r\n                    <ExpansionPanelSummary\r\n                        expandIcon={<ExpandMoreIcon />}\r\n                        aria-controls=\"panel1c-content\"\r\n                        id=\"shift\"\r\n                    // style={{border: '10px'}}\r\n\r\n                    >\r\n                        <div className=\"helptext\">\r\n                            <Typography className=\"Shift\" variant=\"h6\" component=\"h6\">{t('Shift')}</Typography>\r\n                        </div>\r\n                    </ExpansionPanelSummary>\r\n                    <ShiftInput forms={this.state.forms} handleName={this.handleName} handleDate={this.handleDate} />\r\n                    <br />\r\n                </ExpansionPanel>\r\n                <ExpansionPanel TransitionProps={{ unmountOnExit: true }}>\r\n                    <ExpansionPanelSummary\r\n                        expandIcon={<ExpandMoreIcon />}\r\n                        aria-controls=\"panel1c-content\"\r\n                        id=\"turtles\"\r\n                    >\r\n                        <div className=\"helptext\">\r\n                            <Typography className=\"turtles\" variant=\"h6\" component=\"h6\">{t('Turtle Information')}</Typography>\r\n                        </div>\r\n                    </ExpansionPanelSummary>\r\n                    <Turtle handleGender={this.handleGender} handleCondition={this.handleCondition} handleSpecies={this.handleSpecies} forms={this.state.forms} handleTurtInput={this.state.handleTurtInput}\r\n                        handleDimentions={this.handleDimentions} />\r\n                </ExpansionPanel>\r\n                <ExpansionPanel TransitionProps={{ unmountOnExit: true }}>\r\n                    <ExpansionPanelSummary\r\n                        expandIcon={<ExpandMoreIcon />}\r\n                        aria-controls=\"panel1c-content\"\r\n                        id=\"turtles\"\r\n                    >\r\n                        <div className=\"helptext\">\r\n                            <Typography className=\"nests\" variant=\"h6\" component=\"h6\">{t('Nest Information')}</Typography>\r\n                        </div>\r\n                    </ExpansionPanelSummary>\r\n                    <NestInput forms={this.state.forms} handleNest={this.handleNest} />\r\n                </ExpansionPanel>\r\n                <Comments handleComments={this.handleComments} />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    style={{ backgroundColor: '#09bc8a', opacity: 0.9, marginLeft: '0.2em', marginTop: '0.1em' }}\r\n                    size=\"medium\"\r\n                    className=\"submit\"\r\n                    onClick={this.submitNewForm}\r\n                    margin=\"normal\"\r\n                >\r\n                    {t(' Submit ')}\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default withTranslation('translation')(Form);"]},"metadata":{},"sourceType":"module"}